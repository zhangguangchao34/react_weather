'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

exports.default = function (libraryName) {
  return function (_ref) {
    var types = _ref.types;

    var specified = undefined;
    var libraryObjs = undefined;
    var selectedMethods = undefined;

    function camel2Dash(_str) {
      var str = _str[0].toLowerCase() + _str.substr(1);
      return str.replace(/([A-Z])/g, function camel2DashReplace($1) {
        return '-' + $1.toLowerCase();
      });
    }

    function importMethod(methodName, file) {
      if (!selectedMethods[methodName]) {
        var path = libraryName + '/lib/' + camel2Dash(methodName);
        selectedMethods[methodName] = file.addImport(path, 'default');
      }
      return selectedMethods[methodName];
    }

    return {
      visitor: {
        Program: function Program() {
          specified = Object.create(null);
          libraryObjs = Object.create(null);
          selectedMethods = Object.create(null);
        },
        ImportDeclaration: function ImportDeclaration(path) {
          var node = path.node;
          var value = node.source.value;

          if (value === libraryName) {
            node.specifiers.forEach(function (spec) {
              if (types.isImportSpecifier(spec)) {
                specified[spec.local.name] = spec.imported.name;
              } else {
                libraryObjs[spec.local.name] = true;
              }
            });
            path.remove();
          }
        },
        CallExpression: function CallExpression(path) {
          var node = path.node;
          var file = path.hub.file;
          var _node$callee = node.callee;
          var name = _node$callee.name;
          var object = _node$callee.object;
          var property = _node$callee.property;

          if (types.isIdentifier(node.callee)) {
            if (specified[name]) {
              node.callee = importMethod(specified[name], file);
            }
          } else {
            // React.createElement(Button) -> React.createElement(_Button)
            if (object && object.name === 'React' && property && property.name === 'createElement' && node.arguments) {
              node.arguments = node.arguments.map(function (arg) {
                var argName = arg.name;

                if (specified[argName]) {
                  return importMethod(specified[argName], file);
                }
                return arg;
              });
            }
          }
        },
        MemberExpression: function MemberExpression(path) {
          var node = path.node;
          var file = path.hub.file;

          if (libraryObjs[node.object.name]) {
            // antd.Button -> _Button
            path.replaceWith(importMethod(node.property.name, file));
          } else if (specified[node.object.name]) {
            node.object = importMethod(node.object.name, file);
          }
        }
      }
    };
  };
};

module.exports = exports['default'];